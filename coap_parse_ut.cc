/* coap_parse_ut.cc -- Unit tests for coap_parse.c
 * Author: Luis Colorado <luis.colorado@ericsson.com>
 * Date: mar abr 21 20:32:06 EEST 2015
 * Disclaimer: (C) 2015 LUIS COLORADO.  All rights reserved.
 */

#include <gtest/gtest.h>
#include <stdint.h>

#include "coap_mock.hh"

using ::testing::NotNull;
using ::testing::Return;

TEST(CoapParseUnsigned, Size4)
{
    uint8_t buffer[] = {0x01, 0x23, 0x45, 0x67, };
    uint32_t val;

    EXPECT_EQ(COAP_OK, coap_parse_unsigned(buffer, sizeof buffer, &val));
    EXPECT_EQ(0x01234567, val);
}

TEST(CoapParseUnsigned, Size3)
{
    uint8_t buffer[] = {0x01, 0x23, 0x45, };
    uint32_t val;

    EXPECT_EQ(COAP_OK, coap_parse_unsigned(buffer, sizeof buffer, &val));
    EXPECT_EQ(0x012345, val);
}

TEST(CoapParseUnsigned, Size2)
{
    uint8_t buffer[] = {0x01, 0x23, };
    uint32_t val;

    EXPECT_EQ(COAP_OK, coap_parse_unsigned(buffer, sizeof buffer, &val));
    EXPECT_EQ(0x0123, val);
}

TEST(CoapParseUnsigned, Size1)
{
    uint8_t buffer[] = {0x01 };
    uint32_t val;

    EXPECT_EQ(COAP_OK, coap_parse_unsigned(buffer, sizeof buffer, &val));
    EXPECT_EQ(0x01, val);
}

TEST(CoapParseUnsigned, Size0)
{
    uint32_t val = 0xA5A5A5A5;

    EXPECT_EQ(COAP_OK, coap_parse_unsigned(0, 0, &val));
    EXPECT_EQ(0x0, val);
}

TEST(CoapMsgInit, coapMsgInit) {
    coap_msg msg;
    memset(&msg, 0xA5, sizeof msg);
    EXPECT_EQ(COAP_OK, coap_msg_init(&msg));
    EXPECT_EQ(0, msg.c_pktdat);
    EXPECT_EQ(0, msg.c_pktlen);
    EXPECT_EQ(coap_typ_CON, msg.c_typ);
    EXPECT_EQ(0, msg.c_tokdat);
    EXPECT_EQ(0, msg.c_toklen);
    EXPECT_EQ(0, msg.c_code);
    EXPECT_EQ(0, msg.c_msgid);
    EXPECT_EQ(0, msg.c_plddat);
    EXPECT_EQ(0, msg.c_pldlen);
    EXPECT_EQ(0, msg.c_optssz);
}

struct CoapMsgAddOpt: ::testing::Test {
    coap_msg            msg;
    CoapMsgAddOpt() {
        EXPECT_EQ(COAP_OK, coap_msg_init(&msg));
    } /* Misc() */
}; /* Misc */

TEST_F(CoapMsgAddOpt, coapMsgAddOptOK) {
    coap_opt o1, o2, *op;

    o1.o_typ = 1;
    o1.o_val = 0;
    o1.o_len = 0;
    o2.o_typ = 3;
    o2.o_val = 0;
    o2.o_len = 0;

    EXPECT_EQ(0, msg.c_optssz);
    EXPECT_EQ(0, LIST_ELEMENT_FIRST(&msg.c_optslst, coap_opt, o_nod));
    EXPECT_EQ(0, LIST_ELEMENT_LAST(&msg.c_optslst, coap_opt, o_nod));

    EXPECT_EQ(COAP_OK,
            coap_msg_addopt(&msg, &o1));
    EXPECT_EQ(1, msg.c_optssz);

    /* RUN THE LIST, FORWARD */
    op = LIST_ELEMENT_FIRST(&msg.c_optslst, coap_opt, o_nod);
    EXPECT_EQ(&o1, op);
    op = LIST_ELEMENT_NEXT(op, coap_opt, o_nod);
    EXPECT_EQ(0, op);

    /* ...backwards */
    op = LIST_ELEMENT_LAST(&msg.c_optslst, coap_opt, o_nod);
    EXPECT_EQ(&o1, op);
    op = LIST_ELEMENT_PREV(op, coap_opt, o_nod);
    EXPECT_EQ(0, op);

    /* ADD ANOTHER OPTION */
    EXPECT_EQ(COAP_OK,
            coap_msg_addopt(&msg, &o2));
    EXPECT_EQ(2, msg.c_optssz);

    /* RUN THE LIST, FORWARD */
    op = LIST_ELEMENT_FIRST(&msg.c_optslst, coap_opt, o_nod);
    EXPECT_EQ(&o1, op);
    op = LIST_ELEMENT_NEXT(op, coap_opt, o_nod);
    EXPECT_EQ(&o2, op);
    op = LIST_ELEMENT_NEXT(op, coap_opt, o_nod);
    EXPECT_EQ(0, op);

    /* ... and backwards */
    op = LIST_ELEMENT_LAST(&msg.c_optslst, coap_opt, o_nod);
    EXPECT_EQ(&o2, op);
    op = LIST_ELEMENT_PREV(op, coap_opt, o_nod);
    EXPECT_EQ(&o1, op);
    op = LIST_ELEMENT_PREV(op, coap_opt, o_nod);
    EXPECT_EQ(0, op);
}

TEST_F(CoapMsgAddOpt, coapMsgAddOptERROR) {
    coap_opt o1, o2, *op;

    o1.o_typ = 3;
    o1.o_val = 0;
    o1.o_len = 0;
    o2.o_typ = 1;
    o2.o_val = 0;
    o2.o_len = 0;

    EXPECT_EQ(0, msg.c_optssz);
    EXPECT_EQ(0, LIST_ELEMENT_FIRST(&msg.c_optslst, coap_opt, o_nod));
    EXPECT_EQ(0, LIST_ELEMENT_LAST(&msg.c_optslst, coap_opt, o_nod));

    EXPECT_EQ(COAP_OK,
            coap_msg_addopt(&msg, &o1));
    EXPECT_EQ(1, msg.c_optssz);

    /* RUN THE LIST, FORWARD */
    op = LIST_ELEMENT_FIRST(&msg.c_optslst, coap_opt, o_nod);
    EXPECT_EQ(&o1, op);
    op = LIST_ELEMENT_NEXT(op, coap_opt, o_nod);
    EXPECT_EQ(0, op);

    /* ...backwards */
    op = LIST_ELEMENT_LAST(&msg.c_optslst, coap_opt, o_nod);
    EXPECT_EQ(&o1, op);
    op = LIST_ELEMENT_PREV(op, coap_opt, o_nod);
    EXPECT_EQ(0, op);

    /* ADD ANOTHER OPTION */
    EXPECT_EQ(COAP_INVALID_PARAMETER,
            coap_msg_addopt(&msg, &o2));
    EXPECT_EQ(1, msg.c_optssz);

    /* RUN THE LIST, FORWARD */
    op = LIST_ELEMENT_FIRST(&msg.c_optslst, coap_opt, o_nod);
    EXPECT_EQ(&o1, op);
    op = LIST_ELEMENT_NEXT(op, coap_opt, o_nod);
    EXPECT_EQ(0, op);

    /* ... and backwards */
    op = LIST_ELEMENT_LAST(&msg.c_optslst, coap_opt, o_nod);
    EXPECT_EQ(&o1, op);
    op = LIST_ELEMENT_PREV(op, coap_opt, o_nod);
    EXPECT_EQ(0, op);
}

TEST_F(CoapMsgAddOpt, coapMsgOptIteratorFuncs)
{
    coap_opt o1, o2, *op;

    o1.o_typ = 1;
    o1.o_val = 0;
    o1.o_len = 0;
    o2.o_typ = 3;
    o2.o_val = 0;
    o2.o_len = 0;

    /* BASIC CHECKS */
    EXPECT_EQ(0,    coap_msg_fstopt(&msg));
    EXPECT_EQ(0,    coap_msg_lstopt(&msg));

    /* ADD ONE OPTION */
    EXPECT_EQ(COAP_OK,
            coap_msg_addopt(&msg, &o1));

    /* CHECKS */
    EXPECT_EQ(&o1,  coap_msg_fstopt(&msg));
    EXPECT_EQ(&o1,  coap_msg_lstopt(&msg));
    EXPECT_EQ(0,    coap_msg_nxtopt(&o1));
    EXPECT_EQ(0,    coap_msg_prvopt(&o1));
            
    /* ADD ANOTHER OPTION */
    EXPECT_EQ(COAP_OK,
            coap_msg_addopt(&msg, &o2));

    /* CHECKS */
    EXPECT_EQ(&o1,  coap_msg_fstopt(&msg));
    EXPECT_EQ(&o2,  coap_msg_nxtopt(&o1));
    EXPECT_EQ(0,    coap_msg_nxtopt(&o2));
    EXPECT_EQ(&o2,  coap_msg_lstopt(&msg));
    EXPECT_EQ(&o1,  coap_msg_prvopt(&o2));
    EXPECT_EQ(0,    coap_msg_prvopt(&o1));
}

struct CoapParse: ::testing::Test {
    coap_msg        msg;
};

TEST_F(CoapParse, EmptyCONPacket) {
    uint8_t packet[] = {
        /* 4 BYTES */
        /* 0000 */ 0x40,0x00,0x00,0x00,     /* @... */
        /* 0004 */
    }; /* packet */

    EXPECT_EQ(COAP_OK, coap_parse(packet, sizeof packet, &msg));
    EXPECT_EQ(packet, msg.c_pktdat);
    EXPECT_EQ(sizeof packet, msg.c_pktlen);
    EXPECT_EQ(coap_typ_CON, msg.c_typ);
    EXPECT_EQ(0, msg.c_tokdat);
    EXPECT_EQ(0, msg.c_toklen);
    EXPECT_EQ(COAP_CODE(0,0), msg.c_code);
    EXPECT_EQ(0, msg.c_msgid);
    EXPECT_EQ(0, msg.c_plddat);
    EXPECT_EQ(0, msg.c_pldlen);
    EXPECT_EQ(0, LIST_ELEMENT_FIRST(&msg.c_optslst, coap_opt, o_nod));
    EXPECT_EQ(0, LIST_ELEMENT_LAST(&msg.c_optslst, coap_opt, o_nod));
    EXPECT_EQ(0, msg.c_optssz);
}

TEST_F(CoapParse, EmptyNONPacket) {
    uint8_t packet[] =  {
        /* 4 BYTES */
        /* 0000 */ 0x50,0x00,0x00,0x00,     /* P... */
        /* 0004 */
    }; /* packet */

    EXPECT_EQ(COAP_OK, coap_parse(packet, sizeof packet, &msg));
}

TEST_F(CoapParse, EmptyACKPacket) {
    uint8_t packet[] = {
        /* 4 BYTES */
        /* 0000 */ 0x60,0x00,0x00,0x00,     /* `... */
        /* 0004 */
    }; /* packet */

    EXPECT_EQ(COAP_OK, coap_parse(packet, sizeof packet, &msg));
}

TEST_F(CoapParse, EmptyRSTPacket) {
    uint8_t packet[] = {
        /* 4 BYTES */
        /* 0000 */ 0x70,0x00,0x00,0x00,     /* p... */
        /* 0004 */
    }; /* packet */

    EXPECT_EQ(COAP_OK, coap_parse(packet, sizeof packet, &msg));
}

TEST_F(CoapParse, EmptyCONWithMsgid) {
    uint8_t packet[] = {
        /* 4 BYTES */
        /* 0000 */ 0x40,0x00,0x12,0x34,     /* @..4 */
        /* 0004 */
    }; /* packet */

    EXPECT_EQ(COAP_OK, coap_parse(packet, sizeof packet, &msg));
}

TEST_F(CoapParse, EmptyCONWithCode) {
    uint8_t packet[] = {
        /* 4 BYTES */
        /* 0000 */ 0x40,0x01,0x00,0x00,     /* @... */
        /* 0004 */
    }; /* packet */

    EXPECT_EQ(COAP_OK, coap_parse(packet, sizeof packet, &msg));
}

TEST_F(CoapParse, EmptyCONWithToken) {
    uint8_t packet[] = {
        /* 0x10,BYTES */
        /* 0000 */ 0x46,0x01,0x00,0x00,0x00,0x01,0x02,0x03,0x04,0x05,    /* F......... */
        /* 000a */
    }; /* packet */

    EXPECT_EQ(COAP_OK, coap_parse(packet, sizeof packet, &msg));
}

TEST_F(CoapParse, EmptyCONWithPayload) {
    uint8_t packet[] = {
        /* 0x31, BYTES */
        /* 0000 */ 0x40,0x02,0x00,0x00,0xff,0x3c,0x3c,0x3c,0x54,0x68,0x69,0x73,0x20,0x69,0x73,0x20,/* @....<<<This is */
        /* 0010 */ 0x74,0x68,0x65,0x20,0x70,0x61,0x79,0x6c,0x6f,0x61,0x64,0x3e,0x3e,0x3e,0x00,     /* the payload>>>. */
        /* 001f */
    }; /* packet */

    EXPECT_EQ(COAP_OK, coap_parse(packet, sizeof packet, &msg));
}

TEST_F(CoapParse, EmptyCONWithPUT) {
    uint8_t packet[] = {
        /* 4 BYTES */
        /* 0000 */ 0x40,0x02,0x00,0x00,     /* @... */
        /* 0004 */
    }; /* packet */

    EXPECT_EQ(COAP_OK, coap_parse(packet, sizeof packet, &msg));
}

TEST_F(CoapParse, CONWith1BytePayload) {
    uint8_t packet[] = {
        /* 6 BYTES */
        /* 0000 */ 0x40,0x02,0x00,0x00,0xff,0x3c,                                                  /* @....<          */
        /* 0006 */
    }; /* packet */

    EXPECT_EQ(COAP_OK, coap_parse(packet, sizeof packet, &msg));
}

TEST_F(CoapParse, CONWithShortOptAndPayload) {
    uint8_t packet[] = {
        /* 0x40,BYTES */
        /* 0000 */ 0x40,0x02,0x00,0x00,0x38,0x38,0x20,0x42,0x59,0x54,0x45,0x53,0x00,0xff,0x3c,0x3c,/* @...88 BYTES..<< */
        /* 0010 */ 0x3c,0x54,0x68,0x69,0x73,0x20,0x69,0x73,0x20,0x74,0x68,0x65,0x20,0x70,0x61,0x79,/* <This is the pay */
        /* 0020 */ 0x6c,0x6f,0x61,0x64,0x3e,0x3e,0x3e,0x00,                                        /* load>>>.         */
        /* 0028 */
    }; /* packet */

    EXPECT_EQ(COAP_OK, coap_parse(packet, sizeof packet, &msg));
}

TEST_F(CoapParse, CONWithShortOptMediumOptAndPayload) {
    uint8_t packet[] = {
        /* 0x91,BYTES */
        /* 0000 */ 0x40,0x02,0x00,0x00,0x38,0x38,0x20,0x42,0x59,0x54,0x45,0x53,0x00,0x0d,0x24,0x4d,/* @...88 BYTES..$M */
        /* 0010 */ 0x45,0x44,0x49,0x55,0x4d,0x20,0x4c,0x45,0x4e,0x47,0x54,0x48,0x20,0x4d,0x45,0x53,/* EDIUM LENGTH MES */
        /* 0020 */ 0x53,0x41,0x47,0x45,0x20,0x28,0x31,0x33,0x20,0x3c,0x3d,0x20,0x6c,0x65,0x6e,0x67,/* SAGE (13 <= leng */
        /* 0030 */ 0x74,0x68,0x20,0x3c,0x20,0x32,0x36,0x39,0x20,0x63,0x68,0x61,0x72,0x73,0x29,0x00,/* th < 269 chars). */
        /* 0040 */ 0xff,0x3c,0x3c,0x3c,0x54,0x68,0x69,0x73,0x20,0x69,0x73,0x20,0x74,0x68,0x65,0x20,/* .<<<This is the  */
        /* 0050 */ 0x70,0x61,0x79,0x6c,0x6f,0x61,0x64,0x3e,0x3e,0x3e,0x00,                         /* payload>>>.      */
        /* 005b */
    }; /* packet */

    EXPECT_EQ(COAP_OK, coap_parse(packet, sizeof packet, &msg));
}

TEST_F(CoapParse, CONCodeShortOptMediumOptLongOptAndPayload) {
    uint8_t packet[] = {
        /* 605 BYTES */
        /* 0000 */ 0x40,0x02,0x00,0x00,0x38,0x38,0x20,0x42,0x59,0x54,0x45,0x53,0x00,0x0d,0x24,0x4d,/* @...88 BYTES..$M */
        /* 0010 */ 0x45,0x44,0x49,0x55,0x4d,0x20,0x4c,0x45,0x4e,0x47,0x54,0x48,0x20,0x4d,0x45,0x53,/* EDIUM LENGTH MES */
        /* 0020 */ 0x53,0x41,0x47,0x45,0x20,0x28,0x31,0x33,0x20,0x3c,0x3d,0x20,0x6c,0x65,0x6e,0x67,/* SAGE (13 <= leng */
        /* 0030 */ 0x74,0x68,0x20,0x3c,0x20,0x32,0x36,0x39,0x20,0x63,0x68,0x61,0x72,0x73,0x29,0x00,/* th < 269 chars). */
        /* 0040 */ 0xee,0x0a,0xa8,0x00,0xf0,0x4c,0x6f,0x72,0x65,0x6d,0x20,0x69,0x70,0x73,0x75,0x6d,/* .....Lorem ipsum */
        /* 0050 */ 0x20,0x64,0x6f,0x6c,0x6f,0x72,0x20,0x73,0x69,0x74,0x20,0x61,0x6d,0x65,0x74,0x2c,/*  dolor sit amet,*/
        /* 0060 */ 0x20,0x63,0x6f,0x6e,0x73,0x65,0x63,0x74,0x65,0x74,0x75,0x72,0x20,0x61,0x64,0x69,/*  consectetur adi */
        /* 0070 */ 0x70,0x69,0x73,0x63,0x69,0x6e,0x67,0x20,0x65,0x6c,0x69,0x74,0x2c,0x20,0x73,0x65,/* piscing elit,se */
        /* 0080 */ 0x64,0x20,0x64,0x6f,0x20,0x65,0x69,0x75,0x73,0x6d,0x6f,0x64,0x20,0x74,0x65,0x6d,/* d do eiusmod tem */
        /* 0090 */ 0x70,0x6f,0x72,0x20,0x69,0x6e,0x63,0x69,0x64,0x69,0x64,0x75,0x6e,0x74,0x20,0x75,/* por incididunt u */
        /* 00a0 */ 0x74,0x20,0x6c,0x61,0x62,0x6f,0x72,0x65,0x20,0x65,0x74,0x20,0x64,0x6f,0x6c,0x6f,/* t labore et dolo */
        /* 00b0 */ 0x72,0x65,0x20,0x6d,0x61,0x67,0x6e,0x61,0x20,0x61,0x6c,0x69,0x71,0x75,0x61,0x2e,/* re magna aliqua. */
        /* 00c0 */ 0x20,0x55,0x74,0x20,0x65,0x6e,0x69,0x6d,0x20,0x61,0x64,0x20,0x6d,0x69,0x6e,0x69,/*  Ut enim ad mini */
        /* 00d0 */ 0x6d,0x20,0x76,0x65,0x6e,0x69,0x61,0x6d,0x2c,0x20,0x71,0x75,0x69,0x73,0x20,0x6e,/* m veniam,quis n */
        /* 00e0 */ 0x6f,0x73,0x74,0x72,0x75,0x64,0x20,0x65,0x78,0x65,0x72,0x63,0x69,0x74,0x61,0x74,/* ostrud exercitat */
        /* 00f0 */ 0x69,0x6f,0x6e,0x20,0x75,0x6c,0x6c,0x61,0x6d,0x63,0x6f,0x20,0x6c,0x61,0x62,0x6f,/* ion ullamco labo */
        /* 0100 */ 0x72,0x69,0x73,0x20,0x6e,0x69,0x73,0x69,0x20,0x75,0x74,0x20,0x61,0x6c,0x69,0x71,/* ris nisi ut aliq */
        /* 0110 */ 0x75,0x69,0x70,0x20,0x65,0x78,0x20,0x65,0x61,0x20,0x63,0x6f,0x6d,0x6d,0x6f,0x64,/* uip ex ea commod */
        /* 0120 */ 0x6f,0x20,0x63,0x6f,0x6e,0x73,0x65,0x71,0x75,0x61,0x74,0x2e,0x20,0x44,0x75,0x69,/* o consequat. Dui */
        /* 0130 */ 0x73,0x20,0x61,0x75,0x74,0x65,0x20,0x69,0x72,0x75,0x72,0x65,0x20,0x64,0x6f,0x6c,/* s aute irure dol */
        /* 0140 */ 0x6f,0x72,0x20,0x69,0x6e,0x20,0x72,0x65,0x70,0x72,0x65,0x68,0x65,0x6e,0x64,0x65,/* or in reprehende */
        /* 0150 */ 0x72,0x69,0x74,0x20,0x69,0x6e,0x20,0x76,0x6f,0x6c,0x75,0x70,0x74,0x61,0x74,0x65,/* rit in voluptate */
        /* 0160 */ 0x20,0x76,0x65,0x6c,0x69,0x74,0x20,0x65,0x73,0x73,0x65,0x20,0x63,0x69,0x6c,0x6c,/*  velit esse cill */
        /* 0170 */ 0x75,0x6d,0x20,0x64,0x6f,0x6c,0x6f,0x72,0x65,0x20,0x65,0x75,0x20,0x66,0x75,0x67,/* um dolore eu fug */
        /* 0180 */ 0x69,0x61,0x74,0x20,0x6e,0x75,0x6c,0x6c,0x61,0x20,0x70,0x61,0x72,0x69,0x61,0x74,/* iat nulla pariat */
        /* 0190 */ 0x75,0x72,0x2e,0x20,0x45,0x78,0x63,0x65,0x70,0x74,0x65,0x75,0x72,0x20,0x73,0x69,/* ur. Excepteur si */
        /* 01a0 */ 0x6e,0x74,0x20,0x6f,0x63,0x63,0x61,0x65,0x63,0x61,0x74,0x20,0x63,0x75,0x70,0x69,/* nt occaecat cupi */
        /* 01b0 */ 0x64,0x61,0x74,0x61,0x74,0x20,0x6e,0x6f,0x6e,0x20,0x70,0x72,0x6f,0x69,0x64,0x65,/* datat non proide */
        /* 01c0 */ 0x6e,0x74,0x2c,0x20,0x73,0x75,0x6e,0x74,0x20,0x69,0x6e,0x20,0x63,0x75,0x6c,0x70,/* nt,sunt in culp */
        /* 01d0 */ 0x61,0x20,0x71,0x75,0x69,0x20,0x6f,0x66,0x66,0x69,0x63,0x69,0x61,0x20,0x64,0x65,/* a qui officia de */
        /* 01e0 */ 0x73,0x65,0x72,0x75,0x6e,0x74,0x20,0x6d,0x6f,0x6c,0x6c,0x69,0x74,0x20,0x61,0x6e,/* serunt mollit an */
        /* 01f0 */ 0x69,0x6d,0x20,0x69,0x64,0x20,0x65,0x73,0x74,0x20,0x6c,0x61,0x62,0x6f,0x72,0x75,/* im id est laboru */
        /* 0200 */ 0x6d,0x2e,0x20,0x28,0x54,0x68,0x69,0x73,0x20,0x69,0x73,0x20,0x61,0x20,0x6c,0x6f,/* m. (This is a lo */
        /* 0210 */ 0x6e,0x67,0x20,0x6f,0x70,0x74,0x69,0x6f,0x6e,0x20,0x74,0x6f,0x20,0x64,0x65,0x6d,/* ng option to dem */
        /* 0220 */ 0x6f,0x6e,0x73,0x74,0x72,0x61,0x74,0x65,0x20,0x74,0x68,0x65,0x20,0x75,0x73,0x65,/* onstrate the use */
        /* 0230 */ 0x20,0x6f,0x66,0x20,0x70,0x61,0x79,0x6c,0x6f,0x61,0x64,0x20,0x64,0x61,0x74,0x61,/*  of payload data */
        /* 0240 */ 0x29,0x00,0xff,0x3c,0x3c,0x3c,0x54,0x68,0x69,0x73,0x20,0x69,0x73,0x20,0x74,0x68,/* )..<<<This is th */
        /* 0250 */ 0x65,0x20,0x70,0x61,0x79,0x6c,0x6f,0x61,0x64,0x3e,0x3e,0x3e,0x00,               /* e payload>>>.    */
        /* 025d */
    }; /* packet */

    EXPECT_EQ(COAP_OK, coap_parse(packet, sizeof packet, &msg));
}
